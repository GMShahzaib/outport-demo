"use strict";
const showModal = () => {
    setModalVisibility("myModal", true);
};
const hideModal = () => {
    setModalVisibility("myModal", false);
};
const setModalVisibility = (modalId, isVisible) => {
    const modal = document.getElementById(modalId);
    modal.style.display = isVisible ? "block" : "none";
};
// Main function to send API request
const execute = async (endpointId, path, method = 'GET', timeout) => {
    const executeBtn = document.getElementById(`${endpointId}_executeBtn`);
    const loader = document.getElementById(`${endpointId}_executeBtn_loader`);
    const responseSection = document.getElementById(`${endpointId}_response`);
    // Toggle button and loader visibility
    executeBtn.style.display = "none";
    loader.style.display = "block";
    const baseUrl = getSelectedBaseUrl();
    const params = getQueryParameters(endpointId);
    let fullUrl = `${getAddressWithParameters(endpointId, path)}${params ? `?${params}` : ''}`;
    if (!isValidHttpUrl(path)) {
        fullUrl = `${baseUrl}` + fullUrl;
    }
    const headers = getRequestHeaders(endpointId);
    const body = getRequestBody(method, endpointId);
    responseSection?.classList.add("displayNon");
    try {
        const { success, errorMessage, data, headers: respHeaders, status, time } = await testApi({
            path: fullUrl,
            method,
            headers,
            body: body?.body,
            timeout,
        });
        if (!success) {
            showToast(errorMessage || "Something went wrong!");
        }
        else if (errorMessage !== "Request Time Out!") {
            updateUIWithResponse(endpointId, time, status, respHeaders, data);
        }
    }
    catch (error) {
        console.error("An unexpected error occurred:", error);
    }
    finally {
        // Reset button and loader visibility
        executeBtn.style.display = "block";
        loader.style.display = "none";
    }
};
function loadDataToPlayground(endpointId, path, method) {
    const baseUrl = getSelectedBaseUrl();
    const params = getQueryParameters(endpointId);
    let fullUrl = `${path}${params ? `?${params}` : ''}`;
    if (!isValidHttpUrl(path)) {
        fullUrl = `${baseUrl}` + fullUrl;
    }
    const headers = getRequestHeaders(endpointId);
    const requestBody = getRequestBody(method, endpointId);
    let body;
    if (requestBody?.body instanceof FormData) {
        const formDataBodyElement = document.getElementById(`${endpointId}_form_input_body`);
        body = convertFormBodyToJson(requestBody?.body, formDataBodyElement);
    }
    else {
        body = requestBody?.body;
    }
    let destinationPath = `playground?method=${method}&url=${encodeURIComponent(fullUrl)}`;
    if (headers) {
        destinationPath += `&headers=${JSON.stringify(headers)}`;
    }
    if (body && requestBody?.type) {
        destinationPath += `&body=${body}&bodyType=${requestBody?.type}`;
    }
    document.location.href = destinationPath;
}
// Get request header
const getRequestHeaders = (endpointId) => {
    const headers = {};
    const requestHeaders = document.getElementById(`${endpointId}_request_headers_body`);
    const inputs = document.querySelectorAll('input[header-data-key]');
    inputs.forEach(input => {
        const key = input.getAttribute('header-data-key') || '';
        headers[key] = input.value;
    });
    if (requestHeaders) {
        Array.from(requestHeaders.getElementsByTagName("tr")).forEach(tr => {
            const key = tr.getElementsByTagName('td')[0].firstElementChild.value;
            const value = tr.getElementsByTagName('td')[1].firstElementChild.value;
            headers[key] = value;
        });
    }
    return headers;
};
// Get selected base URL
const getSelectedBaseUrl = () => {
    return document.getElementById('baseUrlSelector').value;
};
// Get query parameters
const getQueryParameters = (endpointId) => {
    const paramBody = document.getElementById(`${endpointId}_query_params_body`);
    return Array.from(paramBody.getElementsByTagName("tr"))
        .map(tr => {
        const key = tr.getElementsByTagName('td')[0].firstElementChild.value;
        const value = tr.getElementsByTagName('td')[1].firstElementChild.value;
        return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;
    })
        .join('&');
};
// Get query parameters
const getAddressWithParameters = (endpointId, path) => {
    const variables = extractVariablesFromUrl(path);
    variables.forEach((key) => {
        const value = document.getElementById(`${endpointId}_${key}_value`).value;
        path = path.replace(`{${key}}`, value);
    });
    return path;
};
function extractVariablesFromUrl(urlTemplate) {
    const regex = /{(\w+)}/g;
    const variables = [];
    let match;
    while ((match = regex.exec(urlTemplate)) !== null) {
        variables.push(match[1]);
    }
    return variables;
}
function getRequestBody(method, endpointId) {
    if (method === "GET")
        return;
    const bodyTypeSelector = document.getElementById(`${endpointId}_body_type_selector`);
    const bodyType = bodyTypeSelector.value;
    if (bodyType === "json") {
        const jsonInputBody = document.getElementById(`${endpointId}_json_input_body`);
        const body = jsonInputBody.value;
        if (body && !isValidJson(body)) {
            showErrorOnBody(endpointId);
            return;
        }
        removeErrorOnBody(endpointId);
        return { type: bodyType, body: JSON.stringify(JSON.parse(body)) };
    }
    else {
        const formData = document.getElementById(`${endpointId}_form_input_body`);
        return { type: bodyType, body: new FormData(formData) };
    }
}
