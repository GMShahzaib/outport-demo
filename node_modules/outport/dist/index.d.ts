import express, { NextFunction, Request } from 'express';
import { APIDocumentation, Endpoint } from './schema.js';
export interface SchemaApi {
    name: string;
    endpoints: Endpoint[];
}
declare class Outport {
    private values;
    private apis;
    /**
     * Constructor for creating an instance of Outport.
     * @param {APIDocumentation} values - The initial documentation object that contains details like title, version, servers, headers, and description.
     * @throws Will throw an error if the input `values` does not meet the validation criteria.
     */
    constructor(values: APIDocumentation);
    /**
     * Validates the values passed to the constructor.
     * @param {APIDocumentation} values - The documentation values to validate.
     * @throws Will throw an error if any of the input values are invalid.
     */
    private validateConstructorValues;
    /**
     * Adds a new API schema with specified endpoints.
     * @param {string} name - The name of the API schema.
     * @param {Endpoint[]} endpoints - An array of endpoint objects.
     * @throws Will throw an error if the `name` is invalid or `endpoints` do not meet the validation criteria.
     */
    use(name: string, endpoints: Endpoint[]): void;
    /**
     * Validates an individual endpoint object.
     * @param {Endpoint} endpoint - The endpoint object to validate.
     * @param {number} index - The index of the endpoint in the array.
     * @throws Will throw an error if the endpoint properties do not meet the validation criteria.
     */
    private validateEndpoint;
    private outportTPLString;
    /**
     * Converts an object to a string representation for exporting.
     * @param {object} obj - The object to convert.
     * @returns {string} - The stringified object.
     */
    private stringify;
    /**
     * Middleware function for initializing Swagger documentation.
     * @param {Request} req - The HTTP request object.
     * @param {any} res - The HTTP response object.
     * @param {NextFunction} next - The next middleware function.
     */
    private swaggerInitFn;
    /**
     * Serves the middleware for handling requests and serving static files.
     * @returns {[express.Handler, express.Handler]} - An array with the middleware function and the static file handler.
     */
    serve(): [(req: Request, resp: any, next: NextFunction) => void, express.Handler];
}
export default Outport;
